definitions:
  api.AssignUserRoleRequest:
    properties:
      role_id:
        type: string
      user_id:
        type: string
    type: object
  api.CreateApplicationIssuerKeyRequest:
    properties:
      algorithm:
        type: string
      name:
        type: string
      private_key:
        type: string
    required:
    - name
    type: object
  api.CreateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      full_name:
        type: string
      ldap_attrs:
        items:
          $ref: '#/definitions/model.LDAPAttr'
        type: array
      mfa_enforced:
        type: boolean
      password:
        type: string
      phone:
        type: string
      role_ids:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  api.ImportLDAPApplicationsRequest:
    properties:
      application_dn:
        items:
          type: string
        type: array
    type: object
  api.ImportLDAPUsersRequest:
    properties:
      user_dn:
        items:
          type: string
        type: array
    type: object
  api.LDAPSettingsRequest:
    properties:
      application_base_dn:
        type: string
      application_filter:
        type: string
      application_object_class:
        type: string
      base_dn:
        type: string
      bind_dn:
        type: string
      bind_password:
        type: string
      ca_cert:
        type: string
      client_cert:
        type: string
      client_key:
        type: string
      default_role:
        type: string
      display_name_attr:
        type: string
      email_attr:
        type: string
      enabled:
        type: boolean
      insecure:
        type: boolean
      server_url:
        type: string
      start_tls:
        type: boolean
      user_attr:
        type: string
      user_filter:
        type: string
    type: object
  api.LDAPTestRequest:
    properties:
      base_dn:
        type: string
      bind_dn:
        type: string
      bind_password:
        $ref: '#/definitions/safe.String'
      ca_cert:
        type: string
      client_cert:
        type: string
      client_key:
        $ref: '#/definitions/safe.String'
      default_role:
        type: string
      display_name_attr:
        type: string
      email_attr:
        type: string
      enabled:
        type: boolean
      insecure:
        type: boolean
      password:
        type: string
      server_url:
        type: string
      start_tls:
        type: boolean
      user_attr:
        type: string
      user_filter:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.UpdateApplicationPasswordRequest:
    properties:
      password:
        type: string
    type: object
  api.UpdateApplicationRequest:
    properties:
      description:
        type: string
      description_i18n:
        additionalProperties:
          type: string
        type: object
      display_name:
        type: string
      display_name_i18n:
        additionalProperties:
          type: string
        type: object
      grant_types:
        items:
          type: string
        type: array
      icon:
        type: string
      ldap_attrs:
        items:
          $ref: '#/definitions/model.LDAPAttr'
        type: array
      name:
        type: string
      redirect_uris:
        items:
          type: string
        type: array
      scopes:
        items:
          type: string
        type: array
      status:
        type: string
      uri:
        type: string
    type: object
  api.UpdateApplicationRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  api.UpdateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      full_name:
        type: string
      ldap_attrs:
        items:
          $ref: '#/definitions/model.LDAPAttr'
        type: array
      ldap_dn:
        type: string
      mfa_enforced:
        type: boolean
      phone:
        type: string
      role_ids:
        items:
          type: string
        type: array
      source:
        type: string
      status:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  github_com_sven-victor_ez-auth_internal_model.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_login:
        type: string
      ldap_attrs:
        items:
          $ref: '#/definitions/model.LDAPAttr'
        type: array
      ldap_dn:
        type: string
      mfa_enabled:
        type: boolean
      mfa_enforced:
        type: boolean
      phone:
        type: string
      role:
        type: string
      role_id:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      source:
        $ref: '#/definitions/model.UserSource'
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  github_com_sven-victor_ez-console_pkg_model.User:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_login:
        type: string
      ldap_dn:
        type: string
      mfa_enabled:
        type: boolean
      mfa_enforced:
        type: boolean
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password_changed_at:
        type: string
      phone:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      source:
        $ref: '#/definitions/model.UserSource'
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  model.Application:
    properties:
      created_at:
        type: string
      description:
        type: string
      description_i18n:
        additionalProperties:
          type: string
        type: object
      display_name:
        type: string
      display_name_i18n:
        additionalProperties:
          type: string
        type: object
      grant_types:
        items:
          type: string
        type: array
      icon:
        type: string
      id:
        type: string
      ldap_attrs:
        items:
          $ref: '#/definitions/model.LDAPAttr'
        type: array
      ldap_dn:
        type: string
      name:
        type: string
      redirect_uris:
        items:
          type: string
        type: array
      roles:
        items:
          $ref: '#/definitions/model.ApplicationRole'
        type: array
      scopes:
        items:
          type: string
        type: array
      status:
        description: active, inactive
        type: string
      updated_at:
        type: string
      uri:
        type: string
      users:
        items:
          $ref: '#/definitions/github_com_sven-victor_ez-auth_internal_model.User'
        type: array
    type: object
  model.ApplicationKey:
    properties:
      application_id:
        type: string
      client_id:
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.ApplicationPrivateKey:
    properties:
      algorithm:
        type: string
      application_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      private_key:
        $ref: '#/definitions/safe.String'
      updated_at:
        type: string
    type: object
  model.ApplicationRole:
    properties:
      application_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Condition:
    additionalProperties: true
    type: object
  model.JWK:
    properties:
      alg:
        type: string
      crv:
        type: string
      e:
        type: string
      kid:
        type: string
      kty:
        type: string
      "n":
        type: string
      use:
        type: string
      x:
        type: string
      "y":
        type: string
    type: object
  model.JWKS:
    properties:
      keys:
        items:
          $ref: '#/definitions/model.JWK'
        type: array
    type: object
  model.LDAPAttr:
    properties:
      name:
        type: string
      user_attr:
        type: boolean
      value:
        type: string
    type: object
  model.LDAPSettings:
    properties:
      application_base_dn:
        type: string
      application_filter:
        type: string
      application_object_class:
        type: string
      base_dn:
        type: string
      bind_dn:
        type: string
      bind_password:
        $ref: '#/definitions/safe.String'
      ca_cert:
        type: string
      client_cert:
        type: string
      client_key:
        $ref: '#/definitions/safe.String'
      default_role:
        type: string
      display_name_attr:
        type: string
      email_attr:
        type: string
      enabled:
        type: boolean
      insecure:
        type: boolean
      server_url:
        type: string
      start_tls:
        type: boolean
      user_attr:
        type: string
      user_filter:
        type: string
    type: object
  model.OIDCToken:
    properties:
      access_token:
        type: string
      client_id:
        type: string
      created_at:
        type: string
      expires_in:
        type: integer
      id:
        type: string
      scope:
        type: string
      token_type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.OIDCUserInfo:
    properties:
      application_id:
        type: string
      aud:
        items:
          type: string
        type: array
      code_challenge:
        type: string
      code_challenge_method:
        type: string
      email:
        type: string
      exp:
        type: integer
      grant_types:
        items:
          type: string
        type: array
      iat:
        type: integer
      name:
        type: string
      nonce:
        type: string
      picture:
        type: string
      preferred_username:
        type: string
      role:
        type: string
      role_id:
        type: string
      sid:
        type: string
      sub:
        type: string
    type: object
  model.OpenIDConfiguration:
    properties:
      authorization_endpoint:
        type: string
      claims_supported:
        items:
          type: string
        type: array
      code_challenge_methods_supported:
        items:
          type: string
        type: array
      grant_types_supported:
        items:
          type: string
        type: array
      id_token_signing_alg_values_supported:
        items:
          type: string
        type: array
      introspection_endpoint:
        type: string
      issuer:
        type: string
      jwks_uri:
        type: string
      response_types_supported:
        items:
          type: string
        type: array
      revocation_endpoint:
        type: string
      scopes_supported:
        items:
          type: string
        type: array
      subject_types_supported:
        items:
          type: string
        type: array
      token_endpoint:
        type: string
      token_endpoint_auth_methods_supported:
        items:
          type: string
        type: array
      userinfo_endpoint:
        type: string
    type: object
  model.Permission:
    properties:
      code:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.PolicyDocument:
    properties:
      Statement:
        items:
          $ref: '#/definitions/model.StatementEntry'
        type: array
    type: object
  model.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      policy_document:
        allOf:
        - $ref: '#/definitions/model.PolicyDocument'
        description: Permission configuration based on IAM-style policies, stored
          in JSON format
      updated_at:
        type: string
    type: object
  model.StatementEntry:
    properties:
      Action:
        description: List of actions, can contain wildcards "*"
        items:
          type: string
        type: array
      Condition:
        additionalProperties:
          $ref: '#/definitions/model.Condition'
        description: Conditions
        type: object
      Effect:
        description: '"Allow" or "Deny"'
        type: string
      Resource:
        description: List of resources, can contain wildcards "*"
        items:
          type: string
        type: array
    type: object
  model.UserSource:
    enum:
    - local
    - ldap
    - oauth
    type: string
    x-enum-varnames:
    - UserSourceLocal
    - UserSourceLDAP
    - UserSourceOAuth
  safe.String:
    type: object
  util.ErrorResponse:
    properties:
      code:
        type: string
      err: {}
      message:
        type: string
    type: object
  util.PaginationResponse:
    properties:
      code:
        type: string
      current:
        type: integer
      data: {}
      err:
        type: string
      page_size:
        type: integer
      total:
        type: integer
    type: object
  util.Response:
    properties:
      code:
        type: string
      data: {}
      err:
        type: string
    type: object
info:
  contact: {}
paths:
  /applications:
    get:
      consumes:
      - application/json
      description: Get a paginated list of applications with optional keyword filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Search keywords
        in: query
        name: keywords
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Application'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List applications
      tags:
      - Applications
    post:
      consumes:
      - application/json
      description: Create a new application with the provided information
      parameters:
      - description: Application creation request
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/model.Application'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Application'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create application
      tags:
      - model.Application
  /applications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an application by its ID
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete application
      tags:
      - Applications
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Application'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get application
      tags:
      - Applications
    put:
      consumes:
      - application/json
      description: Update an existing application's information
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Application update request
        in: body
        name: application
        required: true
        schema:
          $ref: '#/definitions/api.UpdateApplicationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Application'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Update application
      tags:
      - Applications
  /applications/{id}/issuer-keys:
    get:
      consumes:
      - application/json
      description: Get all issuer keys for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/util.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.ApplicationPrivateKey'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List application issuer keys
      tags:
      - Applications
    post:
      consumes:
      - application/json
      description: Create a new issuer key for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Create application issuer key request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.CreateApplicationIssuerKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/gin.H'
                  - properties:
                      issuer_key_id:
                        type: string
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create application issuer key
      tags:
      - Applications
  /applications/{id}/issuer-keys/{issuerKeyId}:
    delete:
      consumes:
      - application/json
      description: Delete an issuer key for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Issuer Key ID
        in: path
        name: issuerKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete application issuer key
      tags:
      - Applications
  /applications/{id}/keys:
    get:
      consumes:
      - application/json
      description: Get all keys for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/util.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.ApplicationKey'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List application keys
      tags:
      - Applications
    post:
      consumes:
      - application/json
      description: Create a new key for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/gin.H'
                  - properties:
                      ' client_secret':
                        type: string
                      client_id:
                        type: string
                    type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create application key
      tags:
      - Applications
  /applications/{id}/keys/{keyId}:
    delete:
      consumes:
      - application/json
      description: Delete a key for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Key ID
        in: path
        name: keyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete application key
      tags:
      - Applications
  /applications/{id}/password:
    post:
      consumes:
      - application/json
      description: Update the password for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Update application password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateApplicationPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Update application password
      tags:
      - Applications
  /applications/{id}/roles:
    get:
      consumes:
      - application/json
      description: Get all roles for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/util.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.ApplicationRole'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List application roles
      tags:
      - Applications
    post:
      consumes:
      - application/json
      description: Create a new role for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Role creation request
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.ApplicationRole'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ApplicationRole'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create application role
      tags:
      - Applications
  /applications/{id}/roles/{roleId}:
    delete:
      description: Delete a role for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete application role
      tags:
      - Applications
    put:
      consumes:
      - application/json
      description: Update a role for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      - description: Update application role request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateApplicationRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ApplicationRole'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Update application role
      tags:
      - Applications
  /applications/{id}/users:
    get:
      consumes:
      - application/json
      description: Get all users for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/util.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/github_com_sven-victor_ez-auth_internal_model.User'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List application users
      tags:
      - Applications
    post:
      consumes:
      - application/json
      description: Assign a role to a user for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: Assign user role request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.AssignUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Assign user role
      tags:
      - Applications
  /applications/{id}/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Unassign a role from a user for a specific application
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Unassign user role
      tags:
      - Applications
  /applications/import:
    post:
      consumes:
      - application/json
      description: Import applications from LDAP directory
      parameters:
      - description: LDAP applications import request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ImportLDAPApplicationsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Import LDAP applications
      tags:
      - Applications
  /echo:
    get:
      description: Returns a simple OK message to test API connectivity
      produces:
      - application/json
      responses:
        "200":
          description: Returns a simple OK message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Test API connectivity
      tags:
      - Echo
  /ldap:
    get:
      description: Registers all LDAP Settings endpoints
      responses: {}
      summary: Register LDAP routes
      tags:
      - LDAP
  /ldap/settings:
    get:
      consumes:
      - application/json
      description: Retrieves the current LDAP configuration settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.LDAPSettings'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get LDAP settings
      tags:
      - LDAP
    post:
      consumes:
      - application/json
      description: Updates the LDAP configuration settings
      parameters:
      - description: LDAP settings
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/api.LDAPSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Update LDAP settings
      tags:
      - LDAP
  /ldap/test:
    post:
      consumes:
      - application/json
      description: Tests the LDAP connection with provided credentials
      parameters:
      - description: LDAP test request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LDAPTestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Test LDAP connection
      tags:
      - LDAP
  /oauth2/.well-known/jwks.json:
    get:
      consumes:
      - application/json
      description: Retrieves the JSON Web Key Set for token validation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JWKS'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get JWKS
      tags:
      - OIDC
  /oauth2/.well-known/openid-configuration:
    get:
      consumes:
      - application/json
      description: Retrieves the OpenID Connect configuration information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OpenIDConfiguration'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get OpenID configuration
      tags:
      - OIDC
  /oauth2/authorize:
    get:
      consumes:
      - application/json
      description: Handles OAuth2 authorization requests with client credentials grant
        type
      parameters:
      - description: Client ID
        in: formData
        name: client_id
        required: true
        type: string
      - description: Redirect URI
        in: formData
        name: redirect_uri
        required: true
        type: string
      - description: Response type (code)
        in: formData
        name: response_type
        required: true
        type: string
      - description: Requested scope
        in: formData
        name: scope
        type: string
      - description: Code challenge
        in: formData
        name: code_challenge
        type: string
      - description: Code challenge method
        in: formData
        name: code_challenge_method
        type: string
      - description: State
        in: formData
        name: state
        type: string
      - description: Nonce
        in: formData
        name: nonce
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to the redirect URI
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get OAuth2 authorization
      tags:
      - OIDC
  /oauth2/token:
    post:
      consumes:
      - application/json
      description: Handles OAuth2 token requests with client credentials grant type
      parameters:
      - description: Grant type (client_credentials)
        in: formData
        name: grant_type
        required: true
        type: string
      - description: Client ID
        in: formData
        name: client_id
        required: true
        type: string
      - description: Client secret
        in: formData
        name: client_secret
        required: true
        type: string
      - description: Authorization code
        in: formData
        name: code
        type: string
      - description: Code verifier
        in: formData
        name: code_verifier
        type: string
      - description: Requested scope
        in: formData
        name: scope
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OIDCToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get OAuth2 token
      tags:
      - OIDC
  /oauth2/userinfo:
    get:
      consumes:
      - application/json
      description: Retrieves user information for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OIDCUserInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - OIDC
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional filtering by username,
        email, and status
      parameters:
      - default: 1
        description: Current page number
        in: query
        name: current
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.PaginationResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/github_com_sven-victor_ez-console_pkg_model.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_sven-victor_ez-console_pkg_model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_sven-victor_ez-console_pkg_model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Get user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_sven-victor_ez-console_pkg_model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Update user
      tags:
      - Users
  /users/{id}/reset-password:
    post:
      consumes:
      - application/json
      description: Reset a user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/util.Response'
            - properties:
                data:
                  additionalProperties:
                    allOf:
                    - type: string
                    - properties:
                        new_password:
                          type: string
                      type: object
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Reset password
      tags:
      - Users
  /users/import:
    post:
      consumes:
      - application/json
      description: Import users from LDAP directory
      parameters:
      - description: LDAP users import request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ImportLDAPUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Import LDAP users
      tags:
      - Users
swagger: "2.0"
